/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //zx - zero x => ZX
    //Not16(in=x, out=negX);
    //And16(a=x, b=negX, out=zeroX);
    //Mux16(a=x, b=zeroX, sel=zx, out=ZX);
    Mux16(a=x, b=false, sel=zx, out=ZX);

    //nx - negate x => NX
    Not16(in=ZX, out=notX);
    Mux16(a=ZX, b=notX, sel=nx, out=NX);

    //zy - zero y
    //Not16(in=y, out=negY);
    //And16(a=y, b=negY, out=zeroY);
    //Mux16(a=y, b=zeroY, sel=zy, out=ZY);
    Mux16(a=y, b=false, sel=zy, out=ZY);

    //ny - negate y
    Not16(in=ZY, out=notY);
    Mux16(a=ZY, b=notY, sel=ny, out=NY);

    // f - compute out x + y or x & y
    Add16(a=NX, b=NY, out=Fadd);
    And16(a=NX, b=NY, out=Fand);
    Mux16(a=Fand, b=Fadd, sel=f, out=Fout);

    // no - this odd out[x..y]s are required because for some reason we can't access single values of internal buses (due to Hardware simulator implementation)
    Not16(in=Fout, out=notFout);
    Mux16(a=Fout, b=notFout, sel=no, out=out, out[15]=ng, out[0..7]=lowResult, out[8..15]=highResult);

    // zr - check if out == 0, I really don't like this implementation but for a better one I would need to implement additional gates (ie. Or16Way or something else)
    Or8Way(in=lowResult, out=isNotZero1);
    Or8Way(in=highResult, out=isNotZero2);
    Or(a=isNotZero1, b=isNotZero2, out=isNotZeroFinal);
    Not(in=isNotZeroFinal, out=zr);
}
